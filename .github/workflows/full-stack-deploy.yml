name: Full-Stack Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-frontend:
    uses: ./.github/workflows/frontend-deploy.yml
    secrets: inherit
    permissions:
      contents: read
      packages: write

  build-backend:
    uses: ./.github/workflows/backend-deploy.yml
    secrets: inherit
    permissions:
      contents: read
      packages: write

  cleanup-artifacts:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: always() 
    permissions:
      actions: write

    steps:
      - name: Delete artifacts from frontend build
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            for (const artifact of artifacts.data.artifacts) {
              console.log(`Deleting artifact: ${artifact.name}`);
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
              });
            }

  deploy:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy with Docker Compose
        run: |
          # Create environment file
          cat << EOF > .env
          MONGO_URI=${{ secrets.MONGO_URI }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          EOF

          # Pull latest images
          docker compose pull

          # Start services
          docker compose up -d

          # Wait for services to be ready
          sleep 30

          # Health check
          docker compose ps
